
lab5xx5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000936  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a8  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049a  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include "ADC.h"


void initADC(void) {
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Selecciona ADC6 como entrada analógica (MUX2:0 = 0b110)
	//ADMUX |= (1 << MUX2) | (1 << MUX1);
	// Configura referencia de voltaje AVCC con capacitor en AREF
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	// Configura el ADC para operar en modo de 8 bits
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// Habilita el ADC y configura la prescaler a 128 (Frecuencia de muestreo = F_CPU / 128)
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // habilitar interrupción
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <main>:
uint8_t adc_value_A = 0;
uint8_t adc_value_B = 0;

int main(void)
{
	initADC();     // Inicializa el módulo ADC
  bc:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	setupPWM1();    // Inicializa el módulo PWM
  c0:	0e 94 ce 00 	call	0x19c	; 0x19c <setupPWM1>
	
	sei();  // Habilita las interrupciones globales
  c4:	78 94       	sei

	while (1)
	{
		// Inicia una conversión ADC para el canal A (A6)
		ADMUX = (ADMUX & 0xF8) | 0x06; // Selecciona el canal A6
  c6:	ac e7       	ldi	r26, 0x7C	; 124
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	88 7f       	andi	r24, 0xF8	; 248
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	8c 93       	st	X, r24
		ADCSRA |= (1 << ADSC);  // Inicia una conversión ADC
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	83 ec       	ldi	r24, 0xC3	; 195
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x24>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x2a>
  e6:	00 00       	nop
		_delay_ms(10);           // Pequeña espera entre actualizaciones del ADC
		
		// Inicia una conversión ADC para el canal B (A4)
		ADMUX = (ADMUX & 0xF8) | 0x04; // Selecciona el canal A4
  e8:	8c 91       	ld	r24, X
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8c 93       	st	X, r24
		ADCSRA |= (1 << ADSC);  // Inicia una conversión ADC
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	83 ec       	ldi	r24, 0xC3	; 195
  f8:	99 e0       	ldi	r25, 0x09	; 9
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x3e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x44>
 100:	00 00       	nop
 102:	e1 cf       	rjmp	.-62     	; 0xc6 <main+0xa>

00000104 <__vector_21>:

	return 0;
}

ISR(ADC_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	if ((ADMUX & 0x07) == 0x04) // Si el canal B (A4)
 126:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 12a:	87 70       	andi	r24, 0x07	; 7
 12c:	84 30       	cpi	r24, 0x04	; 4
 12e:	81 f4       	brne	.+32     	; 0x150 <__vector_21+0x4c>
	{
		adc_value_B = ADCH; // Actualiza el valor del ADC para el canal B
 130:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		// Ajusta el ciclo de trabajo del PWM en el canal B
		setPWMChannelB((adc_value_B * 180) / 255); // Ajusta el ciclo de trabajo del canal B
 138:	24 eb       	ldi	r18, 0xB4	; 180
 13a:	82 9f       	mul	r24, r18
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	6f ef       	ldi	r22, 0xFF	; 255
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 148:	86 2f       	mov	r24, r22
 14a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setPWMChannelB>
 14e:	10 c0       	rjmp	.+32     	; 0x170 <__vector_21+0x6c>
	}
	else // Si es el canal A (A6)
	{
		adc_value_A = ADCH; // Actualiza el valor del ADC para el canal A
 150:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_A>

		// Ajusta el ciclo de trabajo del PWM en el canal A
		setPWMChannelA((adc_value_A * 180) / 255 + 10); // Ajusta el ciclo de trabajo del canal A
 158:	24 eb       	ldi	r18, 0xB4	; 180
 15a:	82 9f       	mul	r24, r18
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	86 0f       	add	r24, r22
 16c:	0e 94 df 00 	call	0x1be	; 0x1be <setPWMChannelA>
	}

	ADCSRA |= (1 << ADIF); // Apaga la bandera de interrupción del ADC
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 61       	ori	r24, 0x10	; 16
 178:	80 83       	st	Z, r24
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <setupPWM1>:
#include "PWM1.h"


void setupPWM1(void) {
	// Configurar los pines como salidas PWM
	DDRB |= (1 << DDB1); // Canal A (OC1A)
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB2); // Canal B (OC1B)
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	84 b9       	out	0x04, r24	; 4

	// Configurar el modo de PWM en el Timer1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10); // Modo Fast PWM, No invertido
 1a8:	81 ea       	ldi	r24, 0xA1	; 161
 1aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12); // Modo Fast PWM
 1ae:	e1 e8       	ldi	r30, 0x81	; 129
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24

	// Configurar el preescaler para el Timer1
	TCCR1B |= (1 << CS12); // Preescaler de 1024
 1b6:	80 81       	ld	r24, Z
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <setPWMChannelA>:
}

void setPWMChannelA(uint8_t duty_cycle) {
	OCR1A = (duty_cycle * 180) /255+10; // Establecer el ciclo de trabajo del canal A
 1be:	24 eb       	ldi	r18, 0xB4	; 180
 1c0:	82 9f       	mul	r24, r18
 1c2:	c0 01       	movw	r24, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	6f ef       	ldi	r22, 0xFF	; 255
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 1ce:	66 5f       	subi	r22, 0xF6	; 246
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1da:	08 95       	ret

000001dc <setPWMChannelB>:
}

void setPWMChannelB(uint8_t duty_cycle) {
	OCR1B = (duty_cycle * 180) / 255; // Establecer el ciclo de trabajo del canal B
 1dc:	24 eb       	ldi	r18, 0xB4	; 180
 1de:	82 9f       	mul	r24, r18
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	6f ef       	ldi	r22, 0xFF	; 255
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 1ec:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1f0:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1f4:	08 95       	ret

000001f6 <__divmodhi4>:
 1f6:	97 fb       	bst	r25, 7
 1f8:	07 2e       	mov	r0, r23
 1fa:	16 f4       	brtc	.+4      	; 0x200 <__divmodhi4+0xa>
 1fc:	00 94       	com	r0
 1fe:	07 d0       	rcall	.+14     	; 0x20e <__divmodhi4_neg1>
 200:	77 fd       	sbrc	r23, 7
 202:	09 d0       	rcall	.+18     	; 0x216 <__divmodhi4_neg2>
 204:	0e 94 0f 01 	call	0x21e	; 0x21e <__udivmodhi4>
 208:	07 fc       	sbrc	r0, 7
 20a:	05 d0       	rcall	.+10     	; 0x216 <__divmodhi4_neg2>
 20c:	3e f4       	brtc	.+14     	; 0x21c <__divmodhi4_exit>

0000020e <__divmodhi4_neg1>:
 20e:	90 95       	com	r25
 210:	81 95       	neg	r24
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	08 95       	ret

00000216 <__divmodhi4_neg2>:
 216:	70 95       	com	r23
 218:	61 95       	neg	r22
 21a:	7f 4f       	sbci	r23, 0xFF	; 255

0000021c <__divmodhi4_exit>:
 21c:	08 95       	ret

0000021e <__udivmodhi4>:
 21e:	aa 1b       	sub	r26, r26
 220:	bb 1b       	sub	r27, r27
 222:	51 e1       	ldi	r21, 0x11	; 17
 224:	07 c0       	rjmp	.+14     	; 0x234 <__udivmodhi4_ep>

00000226 <__udivmodhi4_loop>:
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	a6 17       	cp	r26, r22
 22c:	b7 07       	cpc	r27, r23
 22e:	10 f0       	brcs	.+4      	; 0x234 <__udivmodhi4_ep>
 230:	a6 1b       	sub	r26, r22
 232:	b7 0b       	sbc	r27, r23

00000234 <__udivmodhi4_ep>:
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	5a 95       	dec	r21
 23a:	a9 f7       	brne	.-22     	; 0x226 <__udivmodhi4_loop>
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	bc 01       	movw	r22, r24
 242:	cd 01       	movw	r24, r26
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
